name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ ubuntu-latest, windows-latest, macos-13 ]
        build_type: [ Debug ]
        c_compiler: [ gcc, clang, cl ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-13
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-13
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          #          - os: windows-latest
          #            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-13
            c_compiler: cl

    steps:
      - name: Install Dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
               if [[ "${{ matrix.c_compiler }}" == "gcc" ]]; then
                  sudo apt-get install ninja-build gcc-14 g++-14 -y
               elif [[ "${{ matrix.c_compiler }}" == "clang" ]]; then
                  wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
                  sudo apt-add-repository "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-19 main"
                  sudo apt-get update
                  sudo apt-get install ninja-build clang-19 clang-tools-19 -y
               fi
          elif [[ "${{ matrix.os }}" == "macos-13" ]]; then
              if [[ "${{ matrix.c_compiler }}" == "clang" ]]; then
                  brew install ninja lld llvm@19
              else
                  brew install ninja
              fi
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
              if [[ "${{ matrix.c_compiler }}" == "clang" ]]; then
                  choco upgrade llvm -y
                  choco install ninja -y
              else
                  choco install ninja -y
              fi
          fi

      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Set Clang & GCC paths
        id: compiler-path
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "macos-13" && "${{ matrix.c_compiler }}" == "clang" ]]; then
            echo "clangpath=$(brew --prefix llvm@19)/bin/clang" >> "$GITHUB_OUTPUT"
            echo "clangxxpath=$(brew --prefix llvm@19)/bin/clang++" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.c_compiler }}" == "clang" ]]; then
            echo "clangpath=clang-19" >> "$GITHUB_OUTPUT"
            echo "clangxxpath=clang++-19" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.c_compiler }}" == "clang" ]]; then
            echo "clangpath=clang" >> "$GITHUB_OUTPUT"
            echo "clangxxpath=clang++" >> "$GITHUB_OUTPUT"
          fi
          if [[ "${{ matrix.c_compiler }}" == "gcc" ]]; then
            echo "gccpath=gcc-14" >> "$GITHUB_OUTPUT"
            echo "gxxpath=g++-14" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure CMake
        if: matrix.os == 'macos-13' || matrix.os == 'ubuntu-latest'
        # Configure CMake in a 'build' subdirectory.
        run: |
          if [[ "${{ matrix.c_compiler }}" == "clang" && "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_CXX_COMPILER=${{ steps.compiler-path.outputs.clangxxpath }} \
              -DCMAKE_C_COMPILER=${{ steps.compiler-path.outputs.clangpath }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -S ${{ github.workspace }} -G Ninja
          elif [[ "${{ matrix.c_compiler }}" == "gcc" ]]; then
            cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_CXX_COMPILER=${{ steps.compiler-path.outputs.gxxpath }} \
              -DCMAKE_C_COMPILER=${{ steps.compiler-path.outputs.gccpath }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -S ${{ github.workspace }} -G Ninja
            fi

      - name: Configure CMake
        if: matrix.os == 'macos-13' && matrix.c_compiler == 'clang'
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ steps.compiler-path.outputs.clangxxpath }}
          -DCMAKE_C_COMPILER=${{ steps.compiler-path.outputs.clangpath }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_EXE_LINKER_FLAGS="-L$(brew --prefix llvm@19)/lib/c++ -Wl,-rpath,$(brew --prefix llvm@19)/lib/c++"
          -S ${{ github.workspace }} -G Ninja

      - name: Configure CMake
        if: matrix.os == 'windows-latest' && matrix.c_compiler == 'clang'
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ steps.compiler-path.outputs.clangxxpath }}
          -DCMAKE_C_COMPILER=${{ steps.compiler-path.outputs.clangpath }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }} -G Ninja

      - name: Configure CMake
        if: matrix.os == 'windows-latest' && matrix.c_compiler == 'cl'
        shell: pwsh
        run: |
            $installationPath = vswhere.exe -prerelease -latest -property installationPath
            if ($installationPath -and (test-path "$installationPath\Common7\Tools\vsdevcmd.bat")) {
              & "${env:COMSPEC}" /s /c "`"$installationPath\Common7\Tools\vsdevcmd.bat`" -no_logo && set" | foreach-object {
                $name, $value = $_ -split '=', 2
                set-content env:\"$name" $value
              }
            }
          cmake -B ${{ steps.strings.outputs.build-output-dir }} `
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -S ${{ github.workspace }} -G Ninja

      - name: Build
        # Build your program with the given configuration.
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Run cpuidz
        run: ${{ steps.strings.outputs.build-output-dir }}/src/cpuidzpp
